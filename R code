> #1. Data Source verification
> #First I load necessary library
> install.packages("readr")
пакет ‘readr’ успешно распакован, MD5-суммы проверены
> library(readr) #load the library
> getwd() #checking current directory
[1] "D:/OneDrive/Документы"
> #after changing the directory checking once again
> getwd() #checking current directory
[1] "D:/STUDY WSZiB"
> #loading the dataset:
> flight_data_initial <- read.csv('D:/STUDY WSZiB/Airline_Delay_Cause.csv', sep = ";")
> str(flight_data_initial) #displaying the structure of the dataset
'data.frame':   171666 obs. of  21 variables:
 $ year               : int  2023 2023 2023 2023 2023 2023 2023 2023 2023 2023 ...
 $ month              : int  8 8 8 8 8 8 8 8 8 8 ...
 $ carrier            : chr  "9E" "9E" "9E" "9E" ...
 $ carrier_name       : chr  "Endeavor Air Inc." "Endeavor Air Inc." "Endeavor Air Inc." "Endeavor Air Inc." ...
 $ airport            : chr  "ABE" "ABY" "AEX" "AGS" ...
 $ airport_name       : chr  "Allentown/Bethlehem/Easton; PA: Lehigh Valley International" "Albany; GA: Southwest Georgia Regional" "Alexandria; LA: Alexandria International" "Augusta; GA: Augusta Regional at Bush Field" ...
 $ arr_flights        : int  89 62 62 66 92 1636 75 59 62 30 ...
 $ arr_del15          : int  13 10 10 12 22 256 12 7 13 4 ...
 $ carrier_ct         : chr  "2,25" "1,97" "2,73" "3,69" ...
 $ weather_ct         : chr  "1,6" "0,04" "1,18" "2,27" ...
 $ nas_ct             : chr  "3,16" "0,57" "1,8" "4,47" ...
 $ security_ct        : chr  "0" "0" "0" "0" ...
 $ late_aircraft_ct   : chr  "5,99" "7,42" "4,28" "1,57" ...
 $ arr_cancelled      : int  2 0 1 1 2 32 0 2 0 1 ...
 $ arr_diverted       : int  1 1 0 1 0 11 0 0 0 0 ...
 $ arr_delay          : int  1375 799 766 1397 1530 29768 843 324 707 1421 ...
 $ carrier_delay      : int  71 218 56 471 628 9339 535 117 470 0 ...
 $ weather_delay      : int  761 1 188 320 0 4557 170 0 77 532 ...
 $ nas_delay          : int  118 62 78 388 134 4676 111 25 87 0 ...
 $ security_delay     : int  0 0 0 0 0 0 0 0 0 0 ...
 $ late_aircraft_delay: int  425 518 444 218 768 11196 27 182 73 889 ...
-------------------------------------------------------------------------------
> #2. Exploratory data analysis (EDA)
> #- Descriptive Statistics:
> summary(flight_data_initial)
      year          month          carrier          carrier_name      
 Min.   :2013   Min.   : 1.000   Length:171666      Length:171666     
 1st Qu.:2016   1st Qu.: 4.000   Class :character   Class :character  
 Median :2019   Median : 7.000   Mode  :character   Mode  :character  
 Mean   :2019   Mean   : 6.494                                        
 3rd Qu.:2021   3rd Qu.: 9.000                                        
 Max.   :2023   Max.   :12.000                                        
                                                                      
   airport          airport_name        arr_flights        arr_del15      
 Length:171666      Length:171666      Min.   :    1.0   Min.   :   0.00  
 Class :character   Class :character   1st Qu.:   50.0   1st Qu.:   6.00  
 Mode  :character   Mode  :character   Median :  100.0   Median :  17.00  
                                       Mean   :  362.5   Mean   :  66.43  
                                       3rd Qu.:  250.0   3rd Qu.:  47.00  
                                       Max.   :21977.0   Max.   :4176.00  
                                       NA's   :240       NA's   :443      
  carrier_ct         weather_ct           nas_ct          security_ct       
 Length:171666      Length:171666      Length:171666      Length:171666     
 Class :character   Class :character   Class :character   Class :character  
 Mode  :character   Mode  :character   Mode  :character   Mode  :character  
                                                                            
                                                                            
                                                                            
                                                                            
 late_aircraft_ct   arr_cancelled      arr_diverted        arr_delay     
 Length:171666      Min.   :   0.00   Min.   :  0.0000   Min.   :     0  
 Class :character   1st Qu.:   0.00   1st Qu.:  0.0000   1st Qu.:   335  
 Mode  :character   Median :   1.00   Median :  0.0000   Median :  1018  
                    Mean   :   7.53   Mean   :  0.8634   Mean   :  4240  
                    3rd Qu.:   4.00   3rd Qu.:  1.0000   3rd Qu.:  2884  
                    Max.   :4951.00   Max.   :197.0000   Max.   :438783  
                    NA's   :240       NA's   :240        NA's   :240     
 carrier_delay    weather_delay       nas_delay        security_delay    
 Min.   :     0   Min.   :    0.0   Min.   :     0.0   Min.   :   0.000  
 1st Qu.:   110   1st Qu.:    0.0   1st Qu.:    34.0   1st Qu.:   0.000  
 Median :   375   Median :   18.0   Median :   146.0   Median :   0.000  
 Mean   :  1437   Mean   :  222.6   Mean   :   920.6   Mean   :   7.383  
 3rd Qu.:  1109   3rd Qu.:  146.0   3rd Qu.:   477.0   3rd Qu.:   0.000  
 Max.   :196944   Max.   :31960.0   Max.   :112018.0   Max.   :3760.000  
 NA's   :240      NA's   :240       NA's   :240        NA's   :240       
 late_aircraft_delay
 Min.   :     0     
 1st Qu.:    65     
 Median :   320     
 Mean   :  1652     
 3rd Qu.:  1070     
 Max.   :227959     
 NA's   :240        
> # using additional statistics with the help of psych library:
> library(psych)
> describe(flight_data_initial)
                    vars      n    mean       sd median trimmed     mad  min
year                   1 171666 2018.55     2.89 2019.0 2018.65    2.97 2013
month                  2 171666    6.49     3.44    7.0    6.49    4.45    1
carrier*               3 171666   10.18     5.94   11.0   10.03    7.41    1
carrier_name*          4 171666   11.96     6.29   11.0   12.02    8.90    1
airport*               5 171666  202.11   110.90  211.0  203.51  146.78    1
airport_name*          6 171666  207.31   119.49  217.0  207.83  154.19    1
arr_flights            7 171426  362.53   992.89  100.0  155.89  103.78    1
arr_del15              8 171223   66.43   179.54   17.0   28.08   19.27    0
carrier_ct*            9 171666 5731.10  4630.88 4958.5 5482.69 6866.66    1
weather_ct*           10 171666  527.19   998.91   41.0  274.08   57.82    1
nas_ct*               11 171666 4790.44  4684.05 4457.0 4330.87 6456.72    1
security_ct*          12 171666   18.34    67.20    2.0    2.47    0.00    1
late_aircraft_ct*     13 171666 5574.43  5218.14 4905.0 5121.90 7120.93    1
arr_cancelled         14 171426    7.53    43.65    1.0    2.05    1.48    0
arr_diverted          15 171426    0.86     3.77    0.0    0.24    0.00    0
arr_delay             16 171426 4239.49 12618.57 1018.0 1689.22 1255.76    0
carrier_delay         17 171426 1437.19  4215.68  375.0  624.60  489.26    0
weather_delay         18 171426  222.56   821.09   18.0   72.93   26.69    0
nas_delay             19 171426  920.65  3423.51  146.0  274.87  207.56    0
security_delay        20 171426    7.38    41.78    0.0    0.19    0.00    0
late_aircraft_delay   21 171426 1651.70  5221.88  320.0  599.21  462.57    0
                       max  range  skew kurtosis    se
year                  2023     10 -0.25    -1.02  0.01
month                   12     11  0.00    -1.21  0.01
carrier*                21     20  0.15    -1.18  0.01
carrier_name*           23     22 -0.05    -1.44  0.02
airport*               395    394 -0.11    -1.23  0.27
airport_name*          419    418 -0.06    -1.25  0.29
arr_flights          21977  21976  8.44   114.38  2.40
arr_del15             4176   4176  7.25    78.61  0.43
carrier_ct*          14794  14793  0.22    -1.27 11.18
weather_ct*           4054   4053  1.96     2.62  2.41
nas_ct*              14726  14725  0.50    -1.13 11.31
security_ct*           866    865  6.46    50.90  0.16
late_aircraft_ct*    16276  16275  0.43    -1.19 12.59
arr_cancelled         4951   4951 33.55  2078.91  0.11
arr_diverted           197    197 14.55   340.59  0.01
arr_delay           438783 438783  9.21   142.52 30.48
carrier_delay       196944 196944 10.82   207.27 10.18
weather_delay        31960  31960 11.83   215.69  1.98
nas_delay           112018 112018  9.98   144.33  8.27
security_delay        3760   3760 25.00  1413.75  0.10
late_aircraft_delay 227959 227959  9.68   171.11 12.61
> #checking for missing values:
> colSums(is.na(flight_data_initial))
               year               month             carrier        carrier_name 
                  0                   0                   0                   0 
            airport        airport_name         arr_flights           arr_del15 
                  0                   0                 240                 443 
         carrier_ct          weather_ct              nas_ct         security_ct 
                  0                   0                   0                   0 
   late_aircraft_ct       arr_cancelled        arr_diverted           arr_delay 
                  0                 240                 240                 240 
      carrier_delay       weather_delay           nas_delay      security_delay 
                240                 240                 240                 240 
late_aircraft_delay 
                240 
> #checking for duplicate rows:
> duplicate_rows <- flight_data_initial[duplicated(flight_data_initial), ]
> duplicate_rows
 [1] year                month               carrier            
 [4] carrier_name        airport             airport_name       
 [7] arr_flights         arr_del15           carrier_ct         
[10] weather_ct          nas_ct              security_ct        
[13] late_aircraft_ct    arr_cancelled       arr_diverted       
[16] arr_delay           carrier_delay       weather_delay      
[19] nas_delay           security_delay      late_aircraft_delay
<0 строк> (или 'row.names' нулевой длины)
--------------------------------------------------------------------------
> # 3. Data cleaning
> #identifying rows with complete cases:
> complete_rows <- complete.cases(flight_data_initial)
> #subsetting the data frame to keep only the rows with complete cases:
> flight_data_no_missing <- flight_data_initial[complete_rows, ]
> str(flight_data_no_missing)
'data.frame':   171223 obs. of  21 variables:
 $ year               : int  2023 2023 2023 2023 2023 2023 2023 2023 2023 2023 ...
 $ month              : int  8 8 8 8 8 8 8 8 8 8 ...
 $ carrier            : chr  "9E" "9E" "9E" "9E" ...
 $ carrier_name       : chr  "Endeavor Air Inc." "Endeavor Air Inc." "Endeavor Air Inc." "Endeavor Air Inc." ...
 $ airport            : chr  "ABE" "ABY" "AEX" "AGS" ...
 $ airport_name       : chr  "Allentown/Bethlehem/Easton; PA: Lehigh Valley International" "Albany; GA: Southwest Georgia Regional" "Alexandria; LA: Alexandria International" "Augusta; GA: Augusta Regional at Bush Field" ...
 $ arr_flights        : int  89 62 62 66 92 1636 75 59 62 30 ...
 $ arr_del15          : int  13 10 10 12 22 256 12 7 13 4 ...
 $ carrier_ct         : chr  "2,25" "1,97" "2,73" "3,69" ...
 $ weather_ct         : chr  "1,6" "0,04" "1,18" "2,27" ...
 $ nas_ct             : chr  "3,16" "0,57" "1,8" "4,47" ...
 $ security_ct        : chr  "0" "0" "0" "0" ...
 $ late_aircraft_ct   : chr  "5,99" "7,42" "4,28" "1,57" ...
 $ arr_cancelled      : int  2 0 1 1 2 32 0 2 0 1 ...
 $ arr_diverted       : int  1 1 0 1 0 11 0 0 0 0 ...
 $ arr_delay          : int  1375 799 766 1397 1530 29768 843 324 707 1421 ...
 $ carrier_delay      : int  71 218 56 471 628 9339 535 117 470 0 ...
 $ weather_delay      : int  761 1 188 320 0 4557 170 0 77 532 ...
 $ nas_delay          : int  118 62 78 388 134 4676 111 25 87 0 ...
 $ security_delay     : int  0 0 0 0 0 0 0 0 0 0 ...
 $ late_aircraft_delay: int  425 518 444 218 768 11196 27 182 73 889 ...
> colSums(is.na(flight_data_no_missing))
               year               month             carrier        carrier_name 
                  0                   0                   0                   0 
            airport        airport_name         arr_flights           arr_del15 
                  0                   0                   0                   0 
         carrier_ct          weather_ct              nas_ct         security_ct 
                  0                   0                   0                   0 
   late_aircraft_ct       arr_cancelled        arr_diverted           arr_delay 
                  0                   0                   0                   0 
      carrier_delay       weather_delay           nas_delay      security_delay 
                  0                   0                   0                   0 
late_aircraft_delay 
                  0 
> flight_data_test <- flight_data_no_missing
> # Converting the empty strings if they exist to NA:
> flight_data_test[flight_data_test == ""] <-NA
> # converting columns to numeric:
> columns_to_convert <- c("carrier_ct", "weather_ct", "nas_ct", "security_ct", "late_aircraft_ct")
> for (col in columns_to_convert){
flight_data_test[[col]] <- as.numeric(gsub(",",".", as.character(flight_data_test[[col]])))}
> str(flight_data_test)
'data.frame':   171223 obs. of  21 variables:
 $ year               : int  2023 2023 2023 2023 2023 2023 2023 2023 2023 2023 ...
 $ month              : int  8 8 8 8 8 8 8 8 8 8 ...
 $ carrier            : chr  "9E" "9E" "9E" "9E" ...
 $ carrier_name       : chr  "Endeavor Air Inc." "Endeavor Air Inc." "Endeavor Air Inc." "Endeavor Air Inc." ...
 $ airport            : chr  "ABE" "ABY" "AEX" "AGS" ...
 $ airport_name       : chr  "Allentown/Bethlehem/Easton; PA: Lehigh Valley International" "Albany; GA: Southwest Georgia Regional" "Alexandria; LA: Alexandria International" "Augusta; GA: Augusta Regional at Bush Field" ...
 $ arr_flights        : int  89 62 62 66 92 1636 75 59 62 30 ...
 $ arr_del15          : int  13 10 10 12 22 256 12 7 13 4 ...
 $ carrier_ct         : num  2.25 1.97 2.73 3.69 7.76 ...
 $ weather_ct         : num  1.6 0.04 1.18 2.27 0 ...
 $ nas_ct             : num  3.16 0.57 1.8 4.47 2.96 ...
 $ security_ct        : num  0 0 0 0 0 0 0 0 0 0 ...
 $ late_aircraft_ct   : num  5.99 7.42 4.28 1.57 11.28 ...
 $ arr_cancelled      : int  2 0 1 1 2 32 0 2 0 1 ...
 $ arr_diverted       : int  1 1 0 1 0 11 0 0 0 0 ...
 $ arr_delay          : int  1375 799 766 1397 1530 29768 843 324 707 1421 ...
 $ carrier_delay      : int  71 218 56 471 628 9339 535 117 470 0 ...
 $ weather_delay      : int  761 1 188 320 0 4557 170 0 77 532 ...
 $ nas_delay          : int  118 62 78 388 134 4676 111 25 87 0 ...
 $ security_delay     : int  0 0 0 0 0 0 0 0 0 0 ...
 $ late_aircraft_delay: int  425 518 444 218 768 11196 27 182 73 889 ...
> flight_data_no_missing <- flight_data_test
> str(flight_data_no_missing)
'data.frame':   171223 obs. of  21 variables:
 $ year               : int  2023 2023 2023 2023 2023 2023 2023 2023 2023 2023 ...
 $ month              : int  8 8 8 8 8 8 8 8 8 8 ...
 $ carrier            : chr  "9E" "9E" "9E" "9E" ...
 $ carrier_name       : chr  "Endeavor Air Inc." "Endeavor Air Inc." "Endeavor Air Inc." "Endeavor Air Inc." ...
 $ airport            : chr  "ABE" "ABY" "AEX" "AGS" ...
 $ airport_name       : chr  "Allentown/Bethlehem/Easton; PA: Lehigh Valley International" "Albany; GA: Southwest Georgia Regional" "Alexandria; LA: Alexandria International" "Augusta; GA: Augusta Regional at Bush Field" ...
 $ arr_flights        : int  89 62 62 66 92 1636 75 59 62 30 ...
 $ arr_del15          : int  13 10 10 12 22 256 12 7 13 4 ...
 $ carrier_ct         : num  2.25 1.97 2.73 3.69 7.76 ...
 $ weather_ct         : num  1.6 0.04 1.18 2.27 0 ...
 $ nas_ct             : num  3.16 0.57 1.8 4.47 2.96 ...
 $ security_ct        : num  0 0 0 0 0 0 0 0 0 0 ...
 $ late_aircraft_ct   : num  5.99 7.42 4.28 1.57 11.28 ...
 $ arr_cancelled      : int  2 0 1 1 2 32 0 2 0 1 ...
 $ arr_diverted       : int  1 1 0 1 0 11 0 0 0 0 ...
 $ arr_delay          : int  1375 799 766 1397 1530 29768 843 324 707 1421 ...
 $ carrier_delay      : int  71 218 56 471 628 9339 535 117 470 0 ...
 $ weather_delay      : int  761 1 188 320 0 4557 170 0 77 532 ...
 $ nas_delay          : int  118 62 78 388 134 4676 111 25 87 0 ...
 $ security_delay     : int  0 0 0 0 0 0 0 0 0 0 ...
 $ late_aircraft_delay: int  425 518 444 218 768 11196 27 182 73 889 ...
> #exploring and potentially removing outliners
> # Calculate IQR
> iqr <- IQR(flight_data_no_missing$arr_delay)
> # Identify potential outliers using IQR method
> lower_bound <- quantile(flight_data_no_missing$arr_delay)[2] - 1.5 * iqr
> upper_bound <- quantile(flight_data_no_missing$arr_delay)[4] + 1.5 * iqr
> flight_data_clean_iqr <- flight_data_no_missing[flight_data_no_missing$arr_delay >= lower_bound & flight_data_no_missing$arr_delay <= upper_bound, ]
> str(flight_data_clean_iqr)
'data.frame':   150128 obs. of  21 variables:
 $ year               : int  2023 2023 2023 2023 2023 2023 2023 2023 2023 2023 ...
 $ month              : int  8 8 8 8 8 8 8 8 8 8 ...
 $ carrier            : chr  "9E" "9E" "9E" "9E" ...
 $ carrier_name       : chr  "Endeavor Air Inc." "Endeavor Air Inc." "Endeavor Air Inc." "Endeavor Air Inc." ...
 $ airport            : chr  "ABE" "ABY" "AEX" "AGS" ...
 $ airport_name       : chr  "Allentown/Bethlehem/Easton; PA: Lehigh Valley International" "Albany; GA: Southwest Georgia Regional" "Alexandria; LA: Alexandria International" "Augusta; GA: Augusta Regional at Bush Field" ...
 $ arr_flights        : int  89 62 62 66 92 75 59 62 30 58 ...
 $ arr_del15          : int  13 10 10 12 22 12 7 13 4 10 ...
 $ carrier_ct         : num  2.25 1.97 2.73 3.69 7.76 5.62 3.32 6.53 0 2.78 ...
 $ weather_ct         : num  1.6 0.04 1.18 2.27 0 0.97 0 0.94 0.82 0 ...
 $ nas_ct             : num  3.16 0.57 1.8 4.47 2.96 4.41 0.42 3.54 0 3.18 ...
 $ security_ct        : num  0 0 0 0 0 0 0 0 0 0 ...
 $ late_aircraft_ct   : num  5.99 7.42 4.28 1.57 11.28 ...
 $ arr_cancelled      : int  2 0 1 1 2 0 2 0 1 1 ...
 $ arr_diverted       : int  1 1 0 1 0 0 0 0 0 0 ...
 $ arr_delay          : int  1375 799 766 1397 1530 843 324 707 1421 1604 ...
 $ carrier_delay      : int  71 218 56 471 628 535 117 470 0 207 ...
 $ weather_delay      : int  761 1 188 320 0 170 0 77 532 0 ...
 $ nas_delay          : int  118 62 78 388 134 111 25 87 0 1049 ...
 $ security_delay     : int  0 0 0 0 0 0 0 0 0 0 ...
 $ late_aircraft_delay: int  425 518 444 218 768 27 182 73 889 348 ...
> # All steps above for Explore and potentially remove outliers using z-score step
> # Next step is to convert categorical variables to factors: in this case it can be columns carrier, carrier_name, airport, airport_name
> flight_data_clean_iqr$carrier <- as.factor(flight_data_clean_iqr$carrier)
> flight_data_clean_iqr$carrier_name <- as.factor(flight_data_clean_iqr$carrier_name)
> flight_data_clean_iqr$airport_name <- as.factor(flight_data_clean_iqr$airport_name)
> flight_data_clean_iqr$airport <- as.factor(flight_data_clean_iqr$airport)
> str(flight_data_clean_iqr)
'data.frame':   150128 obs. of  21 variables:
 $ year               : int  2023 2023 2023 2023 2023 2023 2023 2023 2023 2023 ...
 $ month              : int  8 8 8 8 8 8 8 8 8 8 ...
 $ carrier            : Factor w/ 21 levels "9E","AA","AS",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ carrier_name       : Factor w/ 23 levels "AirTran Airways Corporation",..: 7 7 7 7 7 7 7 7 7 7 ...
 $ airport            : Factor w/ 391 levels "ABE","ABI","ABQ",..: 1 5 12 13 15 27 28 31 32 37 ...
 $ airport_name       : Factor w/ 415 levels "Aberdeen; SD: Aberdeen Regional",..: 11 7 10 22 8 23 17 187 155 37 ...
 $ arr_flights        : int  89 62 62 66 92 75 59 62 30 58 ...
 $ arr_del15          : int  13 10 10 12 22 12 7 13 4 10 ...
 $ carrier_ct         : num  2.25 1.97 2.73 3.69 7.76 5.62 3.32 6.53 0 2.78 ...
 $ weather_ct         : num  1.6 0.04 1.18 2.27 0 0.97 0 0.94 0.82 0 ...
 $ nas_ct             : num  3.16 0.57 1.8 4.47 2.96 4.41 0.42 3.54 0 3.18 ...
 $ security_ct        : num  0 0 0 0 0 0 0 0 0 0 ...
 $ late_aircraft_ct   : num  5.99 7.42 4.28 1.57 11.28 ...
 $ arr_cancelled      : int  2 0 1 1 2 0 2 0 1 1 ...
 $ arr_diverted       : int  1 1 0 1 0 0 0 0 0 0 ...
 $ arr_delay          : int  1375 799 766 1397 1530 843 324 707 1421 1604 ...
 $ carrier_delay      : int  71 218 56 471 628 535 117 470 0 207 ...
 $ weather_delay      : int  761 1 188 320 0 170 0 77 532 0 ...
 $ nas_delay          : int  118 62 78 388 134 111 25 87 0 1049 ...
 $ security_delay     : int  0 0 0 0 0 0 0 0 0 0 ...
 $ late_aircraft_delay: int  425 518 444 218 768 27 182 73 889 348 ...
--------------------------------------------------------------------------------
> #4. Initial Data Visualization:
> library(ggplot2)
#1. Time Series Analysis by Year:
ggplot(flight_data_clean_iqr, aes(x = year, y = arr_del15)) +
  geom_line(color = "blue", size = 1) +
  labs(title = "Yearly Distribution of Arrival Delays", x = "Year", y = "Count of Arrival Delays") +
  theme_minimal() +
  scale_x_continuous(breaks = unique(flight_data_clean_iqr$year)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
> # for above code I am exploring the trends in arrival delays over time.

#1.1 Monthly Distribution of Arrival Delays
ggplot(flight_data_clean_iqr, aes(x = as.Date(paste0("2022-", month, "-01")), fill = arr_del15)) +
  geom_bar() +
  labs(title = "Monthly Distribution of Arrival Delays", x = "Month", y = "Count of Arrival Delays") +
  theme_minimal() +
  scale_x_date(date_labels = "%B", date_breaks = "1 month")

> #2. Bar Chart for Categorical Variables:
> #visualization of the distribution of flights and delays:
> # Bar chart for carriers
> ggplot(flight_data_clean_iqr, aes(x = carrier, fill = arr_del15)) +
+  geom_bar() +
+ labs(title = "Arrival Delays by Carrier", x = "Carrier", y = "Count of Arrival Delays")
> # Bar chart for airports
> ggplot(flight_data_clean_iqr, aes(x = airport, fill = arr_del15)) +
+ geom_bar() +
+ labs(title = "Arrival Delays by Airport", x = "Airport", y = "Count of Arrival Delays")

> # 3. Correlation Heatmap:
> install.packages("viridis")
> library(viridis)
> heatmap(correlation_matrix, col = viridis::viridis(20), main = "Correlation Heatmap of Delay Types")

#4. Boxplots for Key Metrics:
> #Visualize the distribution of key metrics using boxplots.
> ggplot(flight_data_clean_iqr, aes(x = carrier, y = arr_delay)) +
+ geom_boxplot() +
+ labs(title = "Boxplot of Arrival Delays by Carrier", x = "Carrier", y = "Number of arrival delays")

# 5. Pair Plots:
> install.packages("GGally")
> library(GGally)
# Select relevant columns for pair plot
pair_plot_columns <- flight_data_clean_iqr[, c("arr_flights", "arr_del15", "carrier_ct", "weather_ct", "nas_ct")]
# Create pair plot
ggpairs(pair_plot_columns)

# 6. Pie chart:
> install.packages("tidyr")
> library(tidyr)
delay_sums <- flight_data_clean_iqr %>%
  summarise_at(vars(carrier_ct:late_aircraft_ct), sum)
# Assuming delay_sums is a data frame
> delay_sums_long <- pivot_longer(delay_sums, cols = carrier_ct:late_aircraft_ct, names_to = "Delay_Type", values_to = "Count")
# Calculate percentage
> delay_sums_long$Percentage <- (delay_sums_long$Count / sum(delay_sums_long$Count)) * 100
# Pie chart with percentage labels
> ggplot(delay_sums_long, aes(x = "", y = Percentage, fill = Delay_Type)) +
+   geom_bar(stat = "identity", width = 1, color = "white") +
+   geom_text(aes(label = paste0(round(Percentage, 1), "%")), position = position_stack(vjust = 0.5)) +
+   coord_polar("y") +
+   labs(title = "Percentage of Delay Causes", fill = "Delay Type") +
+   theme_void() +
+   theme(legend.position = "bottom")
--------------------------------------------------------------------------
> # 5. Modeling

# As beginning with SQL Server 2022 (16.x), runtime for R is no longer 
shipped or installed with SQL Server setup. 
Instead, I use the following sections to install the custom runtimes and packages.
install.packages("iterators")
install.packages("foreach")
install.packages("R6")
install.packages("jsonlite")
install.packages("https://aka.ms/sqlml/r4.2/windows/CompatibilityAPI_1.1.0.zip", repos=NULL)
install.packages("https://aka.ms/sqlml/r4.2/windows/RevoScaleR_10.0.1.zip", repos=NULL)

# installing the RevoScaleR package, which is a part of the Microsoft R Server distribution. 
RevoScaleR provides functions for scalable and distributed computing in R, particularly for working with large datasets.
install.packages("RevoScaleR")
library(RevoScaleR)

#renaming the dataset for better readability
fld_cleaned <- flight_data_clean_iqr

#Converting dataset to dataframe:
fld_cleaned <- as.data.frame(unclass(fld_cleaned), stringsAsFactors = TRUE)

# Now will check the classes of dataframe
sapply(fld_cleaned, class) #to check all the classes

  year               month             carrier        carrier_name             airport        airport_name         arr_flights           arr_del15 
          "integer"           "integer"            "factor"            "factor"            "factor"            "factor"           "integer"           "integer" 
         carrier_ct          weather_ct              nas_ct         security_ct    late_aircraft_ct       arr_cancelled        arr_diverted           arr_delay 
          "numeric"           "numeric"           "numeric"           "numeric"           "numeric"           "integer"           "integer"           "integer" 
      carrier_delay       weather_delay           nas_delay      security_delay late_aircraft_delay 
          "integer"           "integer"           "integer"           "integer"           "integer" 


# The purpose of these steps is to prepare the data for further analysis or modeling using 
the RevoScaleR package, ensuring that it's in a suitable format and class for the functions provided by RevoScaleR.

# Step 1: Constructing a basic linear regression model.

#In an effort to discover a more effective model, I will assess various scenarios by modifying the model formula and adjusting the size of the training subset.

#1st try:

#here I am setting the seed for the random number generator
set.seed(123)

# Here I split the Data into Training and Testing Sets
split_index <- sample(seq_len(nrow(fld_cleaned)), size = 0.8 * nrow(fld_cleaned))
train_data <- fld_cleaned[split_index, ]
test_data <- fld_cleaned[-split_index, ]

#The line below defines the formula for the linear regression model. It specifies that I want to predict arr_del15 based on the specified predictors.
model_formula <- as.formula("arr_del15 ~ year + month + carrier + airport + arr_flights + weather_delay")

#Below I use RevoScaleR's rxLinMod function to train a linear regression model (model_lm) using the specified formula and the training data.
model_lm <- rxLinMod(model_formula, data = train_data)
#Using the trained model, this line makes predictions on the test set (test_data) using RevoScaleR's rxPredict function.
Rows Read: 120102, Total Rows Processed: 120102, Total Chunk Time: 0.010 seconds 
Computation time: 0.083 seconds.

predictions_lm <- rxPredict(model_lm, data = test_data)

#Here I use the evaluateRegressor function(which was predefined) to assess the performance of the linear regression model on the test set. 

evaluateRegressor <- function(observed, predicted) {
mean_observed <- mean(observed)
se <- (observed - predicted)^2
ae <- abs(observed - predicted)
sem <- (observed - mean_observed)^2
aem <- abs(observed - mean_observed)
mae <- mean(ae)
rmse <- sqrt(mean(se))
rae <- sum(ae) / sum(aem)
rse <- sum(se) / sum(sem)
rsq <- 1 - rse
metrics <- c("Mean Absolute Error" = mae,"Root Mean Squared Error" = rmse,"Relative Absolute Error" = rae,"Relative Squared Error" = rse,"Coefficient of Determination" = rsq)
return(metrics)
}

eval_lm <- evaluateRegressor(test_data$arr_del15, predictions_lm)
print(eval_lm)
  Mean Absolute Error      Root Mean Squared Error      Relative Absolute Error       Relative Squared Error Coefficient of Determination 
                          16,45                           23,5                    0.5053950                    0.3442932                    0.6557068


#2d try (increased the size of the trained data):

set.seed(123)
split_index <- sample(seq_len(nrow(fld_cleaned)), size = 0.9 * nrow(fld_cleaned))
train_data <- fld_cleaned[split_index, ]
test_data <- fld_cleaned[-split_index, ]
model_formula <- as.formula("arr_del15 ~ year + month + carrier + airport + arr_flights + weather_delay")
model_lm <- rxLinMod(model_formula, data = train_data)

Rows Read: 135115, Total Rows Processed: 135115, Total Chunk Time: 0.012 seconds 
Computation time: 0.067 seconds.

predictions_lm <- rxPredict(model_lm, data = test_data)
eval_lm <- evaluateRegressor(test_data$arr_del15, predictions_lm)
print(eval_lm)

Mean Absolute Error      Root Mean Squared Error      Relative Absolute Error       Relative Squared Error Coefficient of Determination 
                          15,5                           21,4                    0.5039949                    0.3161123                    0.6838877 

#From what we can see the 2d option for now performed better than 1st one as :
Mean Absolute Error (MAE): Model 2 has a slightly lower MAE, indicating better accuracy in predicting the absolute values of the response variable.
Root Mean Squared Error (RMSE): Model 2 has a lower RMSE, suggesting better overall performance in predicting the response variable.
Relative Absolute Error (RAE): Both models have similar RAE, and Model 2 is slightly lower, indicating better accuracy relative to the scale of the response variable.
Relative Squared Error (RSE): Model 2 has a lower RSE, suggesting better performance in explaining the variability of the response variable.
Coefficient of Determination (R²): Model 2 has a higher R², indicating a better fit to the data.

3d# try (broaden the formula)
set.seed(123)
split_index <- sample(seq_len(nrow(fld_cleaned)), size = 0.9 * nrow(fld_cleaned))
train_data <- fld_cleaned[split_index, ]
test_data <- fld_cleaned[-split_index, ]
model_formula <- as.formula("arr_del15 ~ year + month + carrier + airport + arr_flights+ weather_delay+arr_cancelled")
model_lm <- rxLinMod(model_formula, data = train_data)

Rows Read: 135115, Total Rows Processed: 135115, Total Chunk Time: 0.017 seconds 
Computation time: 0.112 seconds.

predictions_lm <- rxPredict(model_lm, data = test_data)
eval_lm <- evaluateRegressor(test_data$arr_del15, predictions_lm)
print(eval_lm)


         Mean Absolute Error      Root Mean Squared Error      Relative Absolute Error       Relative Squared Error Coefficient of Determination 
                          14,8                           20,57                    0.4870926                    0.2897487                    0.7102513 

#Model 3 outperforms both Model 1 and Model 2 in terms of all evaluation metrics, 
demonstrating superior accuracy, precision, and overall goodness of fit to the data.

4th# try (broaden the formula)
set.seed(123)
split_index <- sample(seq_len(nrow(fld_cleaned)), size = 0.9 * nrow(fld_cleaned))
train_data <- fld_cleaned[split_index, ]
test_data <- fld_cleaned[-split_index, ]
model_formula <- as.formula("arr_del15 ~ year + month + carrier + airport + arr_flights+ weather_delay + arr_cancelled + security_delay")
model_lm <- rxLinMod(model_formula, data = train_data)

Rows Read: 135115, Total Rows Processed: 135115, Total Chunk Time: 0.019 seconds 
Computation time: 0.080 seconds.

predictions_lm <- rxPredict(model_lm, data = test_data)
eval_lm <- evaluateRegressor(test_data$arr_del15, predictions_lm)
print(eval_lm)

         Mean Absolute Error      Root Mean Squared Error      Relative Absolute Error       Relative Squared Error Coefficient of Determination 
                          14,6                           20,34                    0.4865205                    0.2889741                    0.7110259 

# The new model shows a slight improvement in several evaluation metrics compared to Model 3.Let's stop here for now.


# Step 2 : Constructing a decision tree regression model to see whether we get better results

model_tree <- rxDTree(model_formula, data = train_data)
predictions_tree <- rxPredict(model_tree, data = test_data)
eval_tree <- evaluateRegressor(test_data$arr_del15, predictions_tree)
print(eval_tree)

Mean Absolute Error      Root Mean Squared Error      Relative Absolute Error       Relative Squared Error Coefficient of Determination 
                          12,87                           18,88                    0.3808079                    0.1942618                    0.8057382

#In summary, the decision tree model appears to outperform the linear regression model based on these evaluation metrics.

# Step 3: Constructing a random forest regression model

model_rf <- rxDForest(formula = model_formula, data = train_data)
predictions_rf <- rxPredict(model_rf, data = test_data)
eval_rf <- evaluateRegressor(test_data$arr_del15, predictions_rf)
print(eval_rf)

print(eval_rf)
         Mean Absolute Error      Root Mean Squared Error      Relative Absolute Error       Relative Squared Error Coefficient of Determination 
                          12,9                           18,95                    0.3874807                    0.1948470                    0.8051530 

#In summary, both models(decision tree and random forest) perform comparably, but the Decision Tree model has a slightly better performance based on RAE and RSE.
